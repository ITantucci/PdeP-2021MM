import Localidad.*
import Empresa.*
import Usuario.*
import Viaje.*
import MedioDeTransporte.*

describe "Barrilete Cosmico" {

// Localidades
	const garlicsSea = new Localidad(nombre = "Garlic´s Sea", equipajeImprescindible = #{ "Caña de Pescar", "Piloto" }, precio = 2500, kilometro = 0)
	const silversSea = new Localidad(nombre = "Silver´s Sea", equipajeImprescindible = #{ "Protector Solar", "Equipo de Buceo" }, precio = 1350, kilometro = 100)
	const lastToninas = new Localidad(nombre = "Last Toninas", equipajeImprescindible = #{ "Vacuna Gripal", "Vacuna B", "Necronomicon" }, precio = 3500, kilometro = 200)
	const goodAirs = new Localidad(nombre = "Good Airs", equipajeImprescindible = #{ "Cerveza", "Protector Solar" }, precio = 1500, kilometro = 300)
// MediosDeTransporte 
	const avion = new MedioDeTransporte(precioPorKilometro = 10, kilometrosPorHora = 900)
	const micro = new MedioDeTransporte(precioPorKilometro = 0.5, kilometrosPorHora = 90)
// Viajes 
	const viajeALasToninas = new Viaje(localidadOrigen = goodAirs, localidadDestino = lastToninas, medioDeTransporte = micro)
	const viajeAGoodAirs = new Viaje(localidadOrigen = lastToninas, localidadDestino = goodAirs, medioDeTransporte = micro)
	const viajeAGarlicsSea = new Viaje(localidadOrigen = goodAirs, localidadDestino = garlicsSea, medioDeTransporte = micro)
	const viajeASilversSea = new Viaje(localidadOrigen = goodAirs, localidadDestino = silversSea, medioDeTransporte = micro)
// Empresa
	const barrileteCosmico = new Empresa(localidades = #{ garlicsSea, silversSea, lastToninas, goodAirs }, mediosDeTransporte = #{ micro })
// Usuario
	const pHari = new Usuario(nombreUsuario = "PHari", viajesRealizados = #{ viajeALasToninas, viajeAGoodAirs }, plataDisponible = 1500, usuariosSeguidos = #{}, localidadDeOrigen = goodAirs)
	const laloLanda = new Usuario(nombreUsuario = "lLanda", viajesRealizados = #{ viajeAGoodAirs }, plataDisponible = 5000, usuariosSeguidos = #{}, localidadDeOrigen = goodAirs)

// TESTS ENTREGA 1 (modificados para la entrega 2)
	test "Obtener los destinos más importantes de Barrilete Cósmico" {
		assert.equals(#{ garlicsSea, lastToninas }, barrileteCosmico.localidadesImportantes())
	}

	test "Aplicarle un 25% de descuento a Last Toninas y su precio cambia" {
		lastToninas.aplicarDescuento(25)
		assert.equals(2625, lastToninas.precio())
	}

	test "Aplicarle un 25% de descuento a Last Toninas y tiene al certificado de descuento como parte de su equipaje imprescindible" {
		lastToninas.aplicarDescuento(25)
		assert.that(lastToninas.equipajeImprescindible().contains("Certificado de descuento"))
	}

	test "Asegurar que Silver's Sea no sea un destino peligroso" {
		assert.notThat(silversSea.soyPeligroso())
	}

	test "Aplicar un descuento del 15% a todos los destinos de Barrilete Cósmico y cambian los precios de sus destinos" {
		barrileteCosmico.aplicarDescuentoALasLocalidades(15)
		assert.equals(2125, garlicsSea.precio())
		assert.equals(1147.5, silversSea.precio())
		assert.equals(2975, lastToninas.precio())
		assert.equals(1275, goodAirs.precio())
	}

	test "Aplicar un descuento del 15% a todos los destinos de Barrilete Cósmico y todos tienen su certificado de descuento" {
		barrileteCosmico.aplicarDescuentoALasLocalidades(15)
		assert.that(barrileteCosmico.localidades().all{ unaLocalidad => unaLocalidad.equipajeImprescindible().contains("Certificado de descuento")})
	}

	test "Obtener los destinos más peligrosos hasta el momento" {
		assert.equals(#{ lastToninas }, barrileteCosmico.localidades().filter{ unDestino => unDestino.soyPeligroso()})
	}

	test "Saber si Barrilete Cósmico es una empresa extrema" {
		assert.that(barrileteCosmico.soyExtrema())
	}

	test "Conocer la carta de destinos de Barrilete Cósmico" {
		assert.equals(#{ garlicsSea, silversSea, lastToninas, goodAirs }, barrileteCosmico.localidades())
	}

	test "Obtener las millas de PHari, que realizao dos viajes, uno de good airs a las toninas y la vuelta de las toninas a good airs" {
		assert.equals(200, pHari.kilometrosDelUsuario())
	}

	test "Hacer que PHari vuele a Silver's Sea y se agregue a sus destinos conocidos" {
		pHari.viajar(viajeASilversSea)
		assert.equals(#{ viajeALasToninas, viajeAGoodAirs, viajeASilversSea }, pHari.viajesRealizados())
	}

	test "Hacer que PHari vuele a Silver 's Sea y se descuente el precio de su cuenta, con el valor del transporte ya adicionado" {
		pHari.viajar(viajeASilversSea)
		assert.equals(50, pHari.plataDisponible())
	}

// TESTS ENTREGA 2 
	test "El valor por los kilometros recorridos de un viaje en avion de 300 km sea $3000" {
		assert.equals(3000, avion.precioDelTransporte(300))
	}

	test "El valor por los kilometros recorridos de un viaje en micrro de 300 km sea $150" {
		assert.equals(150, micro.precioDelTransporte(300))
	}

	test "La distancia de good airs a garlics Sea es de 300km" {
		assert.equals(300, goodAirs.distanciaA(garlicsSea))
	}

	test "Phari nNo puede viajar de su ciudad de origen a su ciudad de origen. Debe lanzar excepcion" {
		assert.throwsExceptionWithMessage("Mi ciudad de Destino es la misma que la de Origen!", { barrileteCosmico.armarViaje(pHari, goodAirs)})
	}

	test "pHari conoce su localidad de origen" {
		assert.equals(goodAirs, pHari.localidadDeOrigen())
	}

	test "Hacer que PHari vuele a Silver 's Sea y se cambie la localidad de origen" {
		pHari.viajar(viajeASilversSea)
		assert.equals(silversSea, pHari.localidadDeOrigen())
	}

	test "lalo landa sigue a phari, y este se agrega a sus usuarios seguidos" {
		laloLanda.seguirUsuario(pHari)
		assert.equals(#{ pHari }, laloLanda.usuariosSeguidos())
	}

	test "lalo landa sigue a phari y este le devuelve el follow" {
		laloLanda.seguirUsuario(pHari)
		assert.equals(#{ laloLanda }, pHari.usuariosSeguidos())
	}

	test "lalo landa viaja a garlicsSea en avion y se le descuenta correctamente el valor del viaje mas la tarifa del avion" {
		laloLanda.viajar(viajeAGarlicsSea)
		assert.equals(2350, laloLanda.plataDisponible())
	}
		test "lalo landa viaja a garlicsSea en avion y se modifica su ciudad de origen" {
		laloLanda.viajar(viajeAGarlicsSea)
		assert.equals(garlicsSea, laloLanda.localidadDeOrigen())
	}

	test "Barrilete cosmico le arma un viaje a pHari y la ciudad de origen es correcta" {
		assert.equals(goodAirs, barrileteCosmico.armarViaje(pHari, garlicsSea).localidadOrigen())
	}

	test "Barrilete cosmico le arma un viaje a pHari y la ciudad de destino es correcta" {
		assert.equals(garlicsSea, barrileteCosmico.armarViaje(pHari, garlicsSea).localidadDestino())
	}

}

